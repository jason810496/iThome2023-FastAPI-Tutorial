from redis_om import get_redis_connection
from redis_om import JsonModel , HashModel , Migrator , Field



# from setting.config import get_settings
from schemas.users import UserRead

redis =get_redis_connection(url="redis://default@localhost:6379",decode_responses=True)




print(type(UserRead))   
print(UserRead.__dict__['__annotations__'])

print(UserRead.__dict__['__annotations__'].items())

from typing import Annotated , Optional

# def redis_model_decorator(annotation):
#     # print("in db_class_decorator")
#     def wrapper(cls):
#         for name, type_ in annotation.items():
#             setattr(cls, name, Annotated[type_,Field(index=True)])
#         return cls
#     # print("out db_class_decorator")
#     return wrapper

# @redis_model_decorator(UserRead.__dict__['__annotations__'])
# class UserReadCache( HashModel ):
#     pass

class UserReadCache( HashModel ):
    id: int = Field(index=True)
    name : str = Field(index=True)
    email: str = Field(index=True)
    avatar:Optional[str] =  None

    class Meta:
        database = redis


print(UserReadCache.__dict__)


Migrator().run()

try:
    print("Add new User")
    new_user = UserReadCache(id=1,name="user1",email="user1@email.com")
    new_user.save()

    print("PK" , new_user.pk )
    print("Use pk to find user")
    print( UserReadCache.get( new_user.pk ).dict() )
    # print( new_user.pk )
except Exception as e:
    print(e)
    pass

# redis.delete("user:1") 

test_user = UserRead(id=1,name="user1",email="user1@email.com")
print( test_user.model_dump() )

try:
    print( redis.get("user:1") )
    print( redis.get("01HCA25H214RBP3SV522N4QBPH"))
    res = UserReadCache.find( UserReadCache.name == "user1" ).all()
    print(res)

except Exception as e:
    print(e)
    print("not found")
    pass

